diff --git a/resources/frag.spv b/resources/frag.spv
deleted file mode 100644
index 5a0382b..0000000
Binary files a/resources/frag.spv and /dev/null differ
diff --git a/resources/shader.frag b/resources/shader.frag
deleted file mode 100644
index cda4cd9..0000000
--- a/resources/shader.frag
+++ /dev/null
@@ -1,20 +0,0 @@
-#version 450
-layout(location = 0) in vec2 vUV;
-layout(location = 0) out vec4 FragColor;
-layout(set = 0, binding = 0) uniform sampler2D uImage;
-
-layout(push_constant) uniform Screen {
-  vec2 size;
-  vec2 offset;
-} uScreen;
-
-layout(constant_id = 0) const float Scale = 1.0;
-
-void main() {
-  vec2 uv = (vUV - uScreen.offset) / uScreen.size;
-  if (uv.x < 0.0 || uv.x > 1.0 || uv.y < 0.0 || uv.y > 1.0) {
-    FragColor = vec4(0, 0, 0, 1);
-  } else {
-    FragColor = Scale * textureLod(uImage, uv, 0.0);
-  }
-}
diff --git a/resources/shader.vert b/resources/shader.vert
deleted file mode 100644
index 6c1c88d..0000000
--- a/resources/shader.vert
+++ /dev/null
@@ -1,8 +0,0 @@
-#version 450
-layout(location = 0) in vec2 Position;
-layout(location = 0) out highp vec2 vUV;
-
-void main() {
-  gl_Position = vec4(Position, 0.0, 1.0);
-  vUV = 0.5 * Position + 0.5;
-}
diff --git a/resources/vert.spv b/resources/vert.spv
deleted file mode 100644
index 924cb24..0000000
Binary files a/resources/vert.spv and /dev/null differ
diff --git a/src/frontend/CMakeLists.txt b/src/frontend/CMakeLists.txt
index 9504dd4..9deffa2 100644
--- a/src/frontend/CMakeLists.txt
+++ b/src/frontend/CMakeLists.txt
@@ -1,9 +1,4 @@
 include_directories(${SDL2_INCLUDE_DIRS})
 add_library(frontend
-    frontend.h frontend.cpp
-    renderer.cpp renderer.h
-    parallel_rdp_wrapper.cpp
-    parallel_rdp_wrapper.h
-    parallel_rdp_wrapper_sdl.h
-)
+    frontend.h frontend.cpp)
 target_precompile_headers(frontend PRIVATE ${PCH_FILES})
diff --git a/src/frontend/frontend.cpp b/src/frontend/frontend.cpp
index 7321fb2..4dfc44f 100644
--- a/src/frontend/frontend.cpp
+++ b/src/frontend/frontend.cpp
@@ -7,6 +7,8 @@ namespace Frontend {
 
 using namespace Vulkan;
 
+WSI *wsi;
+VkInstance instance{};
 
 } // namespace Frontend
 } // namespace N64
\ No newline at end of file
diff --git a/src/frontend/frontend.h b/src/frontend/frontend.h
index af1d9d2..9d6ebde 100644
--- a/src/frontend/frontend.h
+++ b/src/frontend/frontend.h
@@ -1,25 +1,89 @@
 #pragma once
 
-#include "memory/memory.h"
-#include "mmio/vi.h"
 #include "utils.h"
 #include "vulkan_headers.hpp"
 #include <SDL.h>
-#include <SDL_vulkan.h>
-#include <algorithm>
-#include <device.hpp>
-#include <rdp_device.hpp>
 #include <volk.h>
 #include <wsi.hpp>
 
 namespace N64 {
 namespace Frontend {
 
-init_vulkan_wsi(_wsiPlatform, std::make_unique<QtParallelRdpWindowInfo>(pane));
+constexpr int WINDOW_WIDTH = 1024;
+constexpr int WINDOW_HEIGHT = 768;
 
-init_parallel_rdp();
+extern Vulkan::WSI *wsi;
+extern VkInstance instance;
 
-void prdp_update_screen();
+class SDLWSIPlatform final : public Vulkan::WSIPlatform {
+  public:
+    SDLWSIPlatform() = default;
+
+    // TODO: add methods
+};
+
+class Frontend {
+  private:
+    SDL_Window *window{};
+    VkPhysicalDevice physicalDevice{};
+    VkDevice device{};
+    uint32_t queueFamily{uint32_t(-1)};
+    VkQueue queue{};
+    VkPipelineCache pipelineCache{};
+    VkDescriptorPool descriptorPool{};
+    VkAllocationCallbacks *allocator{};
+    uint32_t minImageCount;
+
+  public:
+    Frontend() {
+        SDL_Init(SDL_INIT_EVERYTHING);
+        window = SDL_CreateWindow("n64-emu", SDL_WINDOWPOS_CENTERED,
+                                  SDL_WINDOWPOS_CENTERED, WINDOW_WIDTH,
+                                  WINDOW_HEIGHT,
+                                  SDL_WINDOW_VULKAN | SDL_WINDOW_RESIZABLE |
+                                      SDL_WINDOW_ALLOW_HIGHDPI);
+        if (volkInitialize() != VK_SUCCESS) {
+            Utils::critical("Failed to initialize Vulkan");
+            exit(-1);
+        } else {
+            Utils::info("Vulkan initialized");
+        }
+
+        /*
+        wsi = new Vulkan::WSI();
+        wsi->set_backbuffer_srgb(false);
+        // wsi->set_platform(new Vulkan::WSIPlatform());
+        wsi->set_present_mode(Vulkan::PresentMode::SyncToVBlank);
+
+        Vulkan::Context::SystemHandles handles;
+        if (!wsi->init_simple(1, handles)) {
+            Utils::critical("Failed to initialize WSI");
+            exit(-1);
+        }
+
+        instance = wsi->get_context().get_instance();
+        physicalDevice = wsi->get_device().get_physical_device();
+        device = wsi->get_device().get_device();
+        queueFamily = wsi->get_context()
+                          .get_queue_info()
+                          .family_indices[Vulkan::QUEUE_INDEX_GRAPHICS];
+        queue = wsi->get_context()
+                    .get_queue_info()
+                    .queues[Vulkan::QUEUE_INDEX_GRAPHICS];
+        pipelineCache = nullptr;
+        descriptorPool = nullptr;
+        allocator = nullptr;
+        minImageCount = 2;
+        */
+    }
+
+    ~Frontend() {
+        SDL_DestroyWindow(window);
+        SDL_Quit();
+    }
+
+    void update_screen() {}
+};
 
 } // namespace Frontend
 } // namespace N64
diff --git a/src/frontend/parallel_rdp_wrapper.cpp b/src/frontend/parallel_rdp_wrapper.cpp
deleted file mode 100644
index f38e7b8..0000000
--- a/src/frontend/parallel_rdp_wrapper.cpp
+++ /dev/null
@@ -1,287 +0,0 @@
-
-#include "parallel_rdp_wrapper.h"
-#include "parallel_rdp_wrapper_sdl.h"
-#include <frontend/frontend.h>
-#include <frontend/render.h>
-#include <imgui/imgui_ui.h>
-#include <imgui_impl_vulkan.h>
-#include <mem/mem_util.h>
-#include <memory>
-#include <rdp_device.hpp>
-
-
-using namespace Vulkan;
-using RDP::CommandProcessor;
-using RDP::CommandProcessorFlags;
-using RDP::VIRegister;
-using std::unique_ptr;
-
-static CommandProcessor *command_processor;
-static WSI *wsi;
-static std::unique_ptr<ParallelRdpWindowInfo> windowInfo;
-
-std::vector<Semaphore> acquire_semaphore;
-
-VkQueue get_graphics_queue() {
-    return wsi->get_context().get_queue_info().queues[QUEUE_INDEX_GRAPHICS];
-}
-
-VkInstance get_vk_instance() { return wsi->get_context().get_instance(); }
-
-VkPhysicalDevice get_vk_physical_device() {
-    return wsi->get_device().get_physical_device();
-}
-
-VkDevice get_vk_device() { return wsi->get_device().get_device(); }
-
-uint32_t get_vk_graphics_queue_family() {
-    return wsi->get_context()
-        .get_queue_info()
-        .family_indices[QUEUE_INDEX_GRAPHICS];
-}
-
-VkFormat get_vk_format() {
-    return wsi->get_device().get_swapchain_view().get_format();
-}
-
-CommandBufferHandle requested_command_buffer;
-
-VkCommandBuffer get_vk_command_buffer() {
-    requested_command_buffer = wsi->get_device().request_command_buffer();
-    return requested_command_buffer->get_command_buffer();
-}
-
-void submit_requested_vk_command_buffer() {
-    wsi->get_device().submit(requested_command_buffer);
-}
-
-bool prdp_is_framerate_unlocked() {
-    return wsi->get_present_mode() != PresentMode::SyncToVBlank;
-}
-
-void prdp_set_framerate_unlocked(bool unlocked) {
-    if (unlocked) {
-        wsi->set_present_mode(PresentMode::UnlockedForceTearing);
-    } else {
-        wsi->set_present_mode(PresentMode::SyncToVBlank);
-    }
-}
-
-Program *fullscreen_quad_program;
-
-WSI *init_vulkan_wsi(Vulkan::WSIPlatform *wsi_platform,
-                     std::unique_ptr<ParallelRdpWindowInfo> &&newWindowInfo) {
-    wsi = new WSI();
-    wsi->set_backbuffer_srgb(false);
-    wsi->set_platform(wsi_platform);
-    Context::SystemHandles handles;
-    if (!wsi->init_simple(1, handles)) {
-        logfatal("Failed to initialize WSI!");
-    }
-    windowInfo = std::move(newWindowInfo);
-    return wsi;
-}
-
-void init_parallel_rdp() {
-    ResourceLayout vert_layout;
-    ResourceLayout frag_layout;
-
-    vert_layout.input_mask = 1;
-    vert_layout.output_mask = 1;
-
-    frag_layout.input_mask = 1;
-    frag_layout.output_mask = 1;
-    frag_layout.spec_constant_mask = 1;
-    frag_layout.push_constant_size = 4 * sizeof(float);
-
-    frag_layout.sets[0].sampled_image_mask = 1;
-    frag_layout.sets[0].fp_mask = 1;
-    frag_layout.sets[0].array_size[0] = 1;
-
-    auto fullscreen_quad_vert =
-        Utils::read_binary_file("../resources/vert.spv");
-    auto fullscreen_quad_frag =
-        Utils::read_binary_file("../resources/frag.spv");
-    fullscreen_quad_program = wsi->get_device().request_program(
-        fullscreen_quad_vert, sizeof(fullscreen_quad_vert),
-        fullscreen_quad_frag, sizeof(fullscreen_quad_frag), &vert_layout,
-        &frag_layout);
-
-    auto aligned_rdram = reinterpret_cast<uintptr_t>(n64sys.mem.rdram);
-    uintptr_t offset = 0;
-
-    if (wsi->get_device().get_device_features().supports_external_memory_host) {
-        size_t align =
-            wsi->get_device()
-                .get_device_features()
-                .host_memory_properties.minImportedHostPointerAlignment;
-        offset = aligned_rdram & (align - 1);
-        aligned_rdram -= offset;
-    } else {
-        logwarn("VK_EXT_external_memory_host is not supported by this device. "
-                "Application might run slower because of this.");
-    }
-
-    CommandProcessorFlags flags = 0;
-
-    if (n64_settings.scaling == 2) {
-        flags |= RDP::COMMAND_PROCESSOR_FLAG_UPSCALING_2X_BIT;
-    } else if (n64_settings.scaling == 4) {
-        flags |= RDP::COMMAND_PROCESSOR_FLAG_UPSCALING_4X_BIT;
-    } else if (n64_settings.scaling == 8) {
-        flags |= RDP::COMMAND_PROCESSOR_FLAG_UPSCALING_8X_BIT;
-    }
-
-    command_processor = new CommandProcessor(
-        wsi->get_device(), reinterpret_cast<void *>(aligned_rdram), offset,
-        8 * 1024 * 1024, 4 * 1024 * 1024, flags);
-
-    if (!command_processor->device_is_supported()) {
-        logfatal("This device probably does not support 8/16-bit storage. Make "
-                 "sure you're using up-to-date drivers!");
-    }
-}
-
-void prdp_init_internal_swapchain() {
-    init_vulkan_wsi(new SDLWSIPlatform(),
-                    std::make_unique<SDLParallelRdpWindowInfo>());
-    init_parallel_rdp();
-}
-
-void draw_fullscreen_textured_quad(Util::IntrusivePtr<Image> image,
-                                   Util::IntrusivePtr<CommandBuffer> cmd) {
-    cmd->set_texture(0, 0, image->get_view(),
-                     Vulkan::StockSampler::LinearClamp);
-    cmd->set_program(fullscreen_quad_program);
-    cmd->set_quad_state();
-    auto data = static_cast<float *>(
-        cmd->allocate_vertex_data(0, 6 * sizeof(float), 2 * sizeof(float)));
-    *data++ = -1.0f;
-    *data++ = -3.0f;
-    *data++ = -1.0f;
-    *data++ = +1.0f;
-    *data++ = +3.0f;
-    *data++ = +1.0f;
-
-    auto windowSize = windowInfo->get_window_size();
-
-    float zoom = std::min(
-        (float)windowSize.x / wsi->get_platform().get_surface_width(),
-        (float)windowSize.y / wsi->get_platform().get_surface_height());
-
-    float width =
-        (wsi->get_platform().get_surface_width() / (float)windowSize.x) * zoom;
-    float height =
-        (wsi->get_platform().get_surface_height() / (float)windowSize.y) * zoom;
-
-    float uniform_data[] = {// Size
-                            width, height,
-                            // Offset
-                            (1.0f - width) * 0.5f, (1.0f - height) * 0.5f};
-
-    cmd->push_constants(uniform_data, 0, sizeof(uniform_data));
-
-    cmd->set_vertex_attrib(0, 0, VK_FORMAT_R32G32_SFLOAT, 0);
-    cmd->set_depth_test(false, false);
-    cmd->set_depth_compare(VK_COMPARE_OP_ALWAYS);
-    cmd->set_primitive_topology(VK_PRIMITIVE_TOPOLOGY_TRIANGLE_LIST);
-    cmd->draw(3, 1);
-}
-
-void update_screen(Util::IntrusivePtr<Image> image) {
-    wsi->begin_frame();
-
-    if (!image) {
-        auto info = Vulkan::ImageCreateInfo::immutable_2d_image(
-            N64_SCREEN_X * SCREEN_SCALE, N64_SCREEN_Y * SCREEN_SCALE,
-            VK_FORMAT_R8G8B8A8_UNORM);
-        info.usage = VK_IMAGE_USAGE_SAMPLED_BIT |
-                     VK_IMAGE_USAGE_TRANSFER_SRC_BIT |
-                     VK_IMAGE_USAGE_TRANSFER_DST_BIT;
-        info.misc = IMAGE_MISC_MUTABLE_SRGB_BIT;
-        info.initial_layout = VK_IMAGE_LAYOUT_UNDEFINED;
-        image = wsi->get_device().create_image(info);
-
-        auto cmd = wsi->get_device().request_command_buffer();
-
-        cmd->image_barrier(*image, VK_IMAGE_LAYOUT_UNDEFINED,
-                           VK_IMAGE_LAYOUT_TRANSFER_DST_OPTIMAL,
-                           VK_PIPELINE_STAGE_TOP_OF_PIPE_BIT, 0,
-                           VK_PIPELINE_STAGE_TRANSFER_BIT,
-                           VK_ACCESS_TRANSFER_WRITE_BIT);
-        cmd->clear_image(*image, {});
-        cmd->image_barrier(
-            *image, VK_IMAGE_LAYOUT_TRANSFER_DST_OPTIMAL,
-            VK_IMAGE_LAYOUT_SHADER_READ_ONLY_OPTIMAL,
-            VK_PIPELINE_STAGE_TRANSFER_BIT, VK_ACCESS_TRANSFER_WRITE_BIT,
-            VK_PIPELINE_STAGE_FRAGMENT_SHADER_BIT, VK_ACCESS_SHADER_READ_BIT);
-        wsi->get_device().submit(cmd);
-    }
-
-    Util::IntrusivePtr<CommandBuffer> cmd =
-        wsi->get_device().request_command_buffer();
-
-    cmd->begin_render_pass(wsi->get_device().get_swapchain_render_pass(
-        SwapchainRenderPass::ColorOnly));
-    draw_fullscreen_textured_quad(image, cmd);
-    if (n64sys.video_type != QT_VULKAN_VIDEO_TYPE) {
-        ImGui_ImplVulkan_RenderDrawData(imgui_frame(),
-                                        cmd->get_command_buffer());
-    }
-    cmd->end_render_pass();
-    wsi->get_device().submit(cmd);
-    wsi->end_frame();
-}
-
-void prdp_update_screen() {
-    if (unlikely(!command_processor)) {
-        logfatal("Update screen without an initialized command processor");
-    }
-
-    command_processor->set_vi_register(VIRegister::Control,
-                                       n64sys.vi.status.raw);
-    command_processor->set_vi_register(VIRegister::Origin, n64sys.vi.vi_origin);
-    command_processor->set_vi_register(VIRegister::Width, n64sys.vi.vi_width);
-    command_processor->set_vi_register(VIRegister::Intr, n64sys.vi.vi_v_intr);
-    command_processor->set_vi_register(VIRegister::VCurrentLine,
-                                       n64sys.vi.v_current);
-    command_processor->set_vi_register(VIRegister::Timing,
-                                       n64sys.vi.vi_burst.raw);
-    command_processor->set_vi_register(VIRegister::VSync, n64sys.vi.vsync);
-    command_processor->set_vi_register(VIRegister::HSync, n64sys.vi.hsync);
-    command_processor->set_vi_register(VIRegister::Leap, n64sys.vi.leap);
-    command_processor->set_vi_register(VIRegister::HStart,
-                                       n64sys.vi.hstart.raw);
-    command_processor->set_vi_register(VIRegister::VStart,
-                                       n64sys.vi.vstart.raw);
-    command_processor->set_vi_register(VIRegister::VBurst, n64sys.vi.vburst);
-    command_processor->set_vi_register(VIRegister::XScale,
-                                       n64sys.vi.xscale.raw);
-    command_processor->set_vi_register(VIRegister::YScale,
-                                       n64sys.vi.yscale.raw);
-
-    RDP::ScanoutOptions opts;
-    opts.persist_frame_on_invalid_input = true;
-    opts.vi.aa = true;
-    opts.vi.scale = true;
-    opts.vi.dither_filter = true;
-    opts.vi.divot_filter = true;
-    opts.vi.gamma_dither = true;
-    opts.downscale_steps = true;
-    opts.crop_overscan_pixels = true;
-    Util::IntrusivePtr<Image> image = command_processor->scanout(opts);
-    update_screen(image);
-    command_processor->begin_frame_context();
-}
-
-void prdp_update_screen_no_game() {
-    update_screen(static_cast<Util::IntrusivePtr<Image>>(nullptr));
-}
-
-void prdp_enqueue_command(int command_length, u32 *buffer) {
-    command_processor->enqueue_command(command_length, buffer);
-}
-
-void prdp_on_full_sync() {
-    command_processor->wait_for_timeline(command_processor->signal_timeline());
-}
diff --git a/src/frontend/parallel_rdp_wrapper.h b/src/frontend/parallel_rdp_wrapper.h
deleted file mode 100644
index 2fb51a3..0000000
--- a/src/frontend/parallel_rdp_wrapper.h
+++ /dev/null
@@ -1,42 +0,0 @@
-#ifndef N64_PARALLEL_RDP_WRAPPER_H
-#define N64_PARALLEL_RDP_WRAPPER_H
-
-#ifdef __cplusplus
-#include <wsi.hpp>
-class ParallelRdpWindowInfo {
-  public:
-    struct CoordinatePair {
-        int x;
-        int y;
-    };
-    virtual CoordinatePair get_window_size() = 0;
-    virtual ~ParallelRdpWindowInfo() = default;
-};
-
-VkQueue get_graphics_queue();
-VkInstance get_vk_instance();
-VkPhysicalDevice get_vk_physical_device();
-VkDevice get_vk_device();
-uint32_t get_vk_graphics_queue_family();
-VkFormat get_vk_format();
-VkCommandBuffer get_vk_command_buffer();
-void submit_requested_vk_command_buffer();
-Vulkan::WSI *
-init_vulkan_wsi(Vulkan::WSIPlatform *wsi_platform,
-                std::unique_ptr<ParallelRdpWindowInfo> &&windowInfo);
-void init_parallel_rdp();
-
-extern "C" {
-#endif
-void prdp_init_internal_swapchain();
-void prdp_update_screen();
-void prdp_enqueue_command(int command_length, u32 *buffer);
-void prdp_on_full_sync();
-void prdp_update_screen_no_game();
-bool prdp_is_framerate_unlocked();
-void prdp_set_framerate_unlocked(bool unlocked);
-#ifdef __cplusplus
-};
-#endif
-
-#endif // N64_PARALLEL_RDP_WRAPPER_H
diff --git a/src/frontend/parallel_rdp_wrapper_sdl.h b/src/frontend/parallel_rdp_wrapper_sdl.h
deleted file mode 100644
index d688061..0000000
--- a/src/frontend/parallel_rdp_wrapper_sdl.h
+++ /dev/null
@@ -1,70 +0,0 @@
-#ifndef N64_PARALLEL_RDP_WRAPPER_SDL_H
-#define N64_PARALLEL_RDP_WRAPPER_SDL_H
-
-#include <SDL_video.h>
-#include <SDL_vulkan.h>
-#include <frontend/frontend.h>
-#include <frontend/render.h>
-
-extern "C" {
-extern SDL_Window *window;
-}
-
-class SDLWSIPlatform : public Vulkan::WSIPlatform {
-  public:
-    SDLWSIPlatform() = default;
-
-    std::vector<const char *> get_instance_extensions() override {
-        const char *extensions[64];
-        unsigned int num_extensions = 64;
-
-        if (!SDL_Vulkan_GetInstanceExtensions(window, &num_extensions,
-                                              extensions)) {
-            logfatal("SDL_Vulkan_GetInstanceExtensions failed: %s",
-                     SDL_GetError());
-        }
-        auto vec = std::vector<const char *>();
-
-        for (unsigned int i = 0; i < num_extensions; i++) {
-            vec.push_back(extensions[i]);
-        }
-
-        return vec;
-    }
-
-    VkSurfaceKHR create_surface(VkInstance instance,
-                                VkPhysicalDevice gpu) override {
-        VkSurfaceKHR vk_surface;
-        if (!SDL_Vulkan_CreateSurface(window, instance, &vk_surface)) {
-            logfatal("Failed to create Vulkan window surface: %s",
-                     SDL_GetError());
-        }
-        return vk_surface;
-    }
-
-    uint32_t get_surface_width() override {
-        return N64_SCREEN_X * SCREEN_SCALE;
-    }
-
-    uint32_t get_surface_height() override {
-        return N64_SCREEN_Y * SCREEN_SCALE;
-    }
-
-    bool alive(Vulkan::WSI &wsi) override { return true; }
-
-    void poll_input() override { n64_poll_input(); }
-
-    void event_frame_tick(double frame, double elapsed) override {
-        n64_render_screen();
-    }
-};
-
-class SDLParallelRdpWindowInfo : public ParallelRdpWindowInfo {
-    CoordinatePair get_window_size() {
-        int sdlWinWidth, sdlWinHeight;
-        SDL_GetWindowSize(window, &sdlWinWidth, &sdlWinHeight);
-        return CoordinatePair{sdlWinWidth, sdlWinHeight};
-    }
-};
-
-#endif // N64_PARALLEL_RDP_WRAPPER_SDL_H
diff --git a/src/frontend/renderer.cpp b/src/frontend/renderer.cpp
deleted file mode 100644
index 09dde29..0000000
--- a/src/frontend/renderer.cpp
+++ /dev/null
@@ -1,164 +0,0 @@
-#include "renderer.h"
-#include "frontend.h"
-
-#include <SDL.h>
-#include <SDL_vulkan.h>
-
-#include <parallel_rdp_wrapper.h>
-#include <volk.h>
-
-#include "mmio/vi.h"
-
-//#include <settings.h>
-
-// prior to 2.0.10, this was anonymous enum
-#if SDL_COMPILEDVERSION < SDL_VERSIONNUM(2, 0, 10)
-typedef int SDL_PixelFormatEnum;
-#endif
-
-int SCREEN_SCALE = 2;
-static SDL_GLContext gl_context;
-SDL_Window *window = NULL;
-static SDL_Renderer *renderer = NULL;
-static SDL_Texture *texture = NULL;
-static uint8_t pixel_buffer[640 * 480 * 4]; // should be the largest needed
-
-uint32_t fps_interval = 1000; // 1000ms = 1 second
-uint32_t sdl_lastframe = 0;
-uint32_t sdl_numframes = 0;
-uint32_t sdl_fps = 0;
-uint32_t game_fps = 0;
-const char *APP_NAME = "n64-emu";
-char sdl_wintitle[100] = "n64-emu 00 FPS";
-
-SDL_Window *get_window_handle() { return window; }
-
-void video_init_vulkan() {
-    window = SDL_CreateWindow(
-        APP_NAME, SDL_WINDOWPOS_UNDEFINED, SDL_WINDOWPOS_UNDEFINED,
-        N64_SCREEN_X * SCREEN_SCALE, N64_SCREEN_Y * SCREEN_SCALE,
-        SDL_WINDOW_SHOWN | SDL_WINDOW_VULKAN | SDL_WINDOW_RESIZABLE);
-    if (volkInitialize() != VK_SUCCESS) {
-        Utils::critical("Failed to load Volk");
-        exit(-1);
-    }
-}
-
-void video_init_software() {
-    window =
-        SDL_CreateWindow(APP_NAME, SDL_WINDOWPOS_UNDEFINED,
-                         SDL_WINDOWPOS_UNDEFINED, N64_SCREEN_X * SCREEN_SCALE,
-                         N64_SCREEN_Y * SCREEN_SCALE, SDL_WINDOW_SHOWN);
-    renderer = SDL_CreateRenderer(
-        window, -1, SDL_RENDERER_ACCELERATED | SDL_RENDERER_PRESENTVSYNC);
-}
-
-void render_init() {
-    uint32_t flags = SDL_INIT_AUDIO;
-    if (SDL_Init(flags) < 0) {
-        Utils::critical("SDL couldn't initialize! {}", SDL_GetError());
-        exit(-1);
-    }
-}
-
-static uint32_t last_vi_type = 0;
-static uint32_t vi_height = 0;
-static uint32_t vi_width = 0;
-
-inline void pre_scanout(SDL_PixelFormatEnum pixel_format) {
-    float y_scale = (float)N64::g_vi().reg_y_scale.scale / 1024.0;
-    float x_scale = (float)N64::g_vi().reg_x_scale.scale / 1024.0;
-
-    int new_height =
-        ceilf((float)((N64::g_vi().reg_v_video.end - N64::g_vi().reg_v_end.start) >> 1) *
-              y_scale);
-    int new_width =
-        ceilf((float)((n64sys.vi.hstart.end - n64sys.vi.hstart.start) >> 0) *
-              x_scale);
-
-    bool should_recreate_texture = false;
-
-    should_recreate_texture |= new_height != vi_height;
-    should_recreate_texture |= new_width != vi_width;
-
-    should_recreate_texture |= last_vi_type != n64sys.vi.status.type;
-
-    if (should_recreate_texture) {
-        last_vi_type = n64sys.vi.status.type;
-        vi_height = new_height;
-        vi_width = new_width;
-        if (texture != NULL) {
-            SDL_DestroyTexture(texture);
-        }
-        texture =
-            SDL_CreateTexture(renderer, pixel_format,
-                              SDL_TEXTUREACCESS_STREAMING, vi_width, vi_height);
-    }
-}
-
-static void vi_scanout_16bit() {
-    pre_scanout(SDL_PIXELFORMAT_RGBA5551);
-    const int rdram_offset = n64sys.vi.vi_origin & (N64_RDRAM_SIZE - 1);
-    for (int y = 0; y < vi_height; y++) {
-        int yofs = (y * vi_width * 2);
-        for (int x = 0; x < vi_width; x += 2) {
-            memcpy(&pixel_buffer[yofs + x * 2 + 2],
-                   &n64sys.mem.rdram[rdram_offset + yofs + x * 2 + 0],
-                   sizeof(uint16_t));
-            memcpy(&pixel_buffer[yofs + x * 2 + 0],
-                   &n64sys.mem.rdram[rdram_offset + yofs + x * 2 + 2],
-                   sizeof(uint16_t));
-        }
-    }
-    SDL_UpdateTexture(texture, NULL, &pixel_buffer, vi_width * 2);
-    SDL_RenderCopy(renderer, texture, NULL, NULL);
-}
-
-static void vi_scanout_32bit() {
-    pre_scanout(SDL_PIXELFORMAT_RGBA8888);
-    int rdram_offset = n64sys.vi.vi_origin & (N64_RDRAM_SIZE - 1);
-    SDL_UpdateTexture(texture, NULL, &n64sys.mem.rdram[rdram_offset],
-                      vi_width * 4);
-    SDL_RenderCopy(renderer, texture, NULL, NULL);
-
-    void n64_render_screen() {
-        sdl_numframes++;
-        uint32_t ticks = SDL_GetTicks();
-        if (sdl_lastframe < ticks - fps_interval) {
-            sdl_lastframe = ticks;
-            sdl_fps = sdl_numframes;
-            sdl_numframes = 0;
-            game_fps = n64sys.vi.swaps;
-            n64sys.vi.swaps = 0;
-            const char *game_name = n64sys.mem.rom.game_name_db != NULL
-                                        ? n64sys.mem.rom.game_name_db
-                                        : n64sys.mem.rom.game_name_cartridge;
-            if (game_name == NULL || strcmp(game_name, "") == 0) {
-                snprintf(sdl_wintitle, sizeof(sdl_wintitle),
-                         APP_NAME " %02d emulator FPS / %02d game FPS", sdl_fps,
-                         game_fps);
-            } else {
-                snprintf(sdl_wintitle, sizeof(sdl_wintitle),
-                         N64_APP_NAME " [%s] %02d emulator FPS / %02d game FPS",
-                         game_name, sdl_fps, game_fps);
-            }
-            SDL_SetWindowTitle(window, sdl_wintitle);
-        }
-    }
-}
-
-bool is_framerate_unlocked() {
-    switch (n64_video_type) {
-    case VULKAN_VIDEO_TYPE:
-    case QT_VULKAN_VIDEO_TYPE:
-        return prdp_is_framerate_unlocked();
-
-    case UNKNOWN_VIDEO_TYPE:
-    case SOFTWARE_VIDEO_TYPE:
-        return false;
-    }
-}
-
-void set_framerate_unlocked(bool unlocked) {
-    prdp_set_framerate_unlocked(unlocked);
-}
diff --git a/src/frontend/renderer.h b/src/frontend/renderer.h
deleted file mode 100644
index c5783e3..0000000
--- a/src/frontend/renderer.h
+++ /dev/null
@@ -1,21 +0,0 @@
-#ifndef N64_RENDER_H
-#define N64_RENDER_H
-
-#ifdef __cplusplus
-extern "C" {
-#endif
-
-#define N64_SCREEN_X 640
-#define N64_SCREEN_Y 480
-extern int SCREEN_SCALE;
-
-void render_init();
-void n64_render_screen();
-bool is_framerate_unlocked();
-void set_framerate_unlocked(bool unlocked);
-
-#ifdef __cplusplus
-}
-#endif
-
-#endif // N64_RENDER_H
diff --git a/src/mmio/vi.h b/src/mmio/vi.h
index 12053be..9d9a2be 100644
--- a/src/mmio/vi.h
+++ b/src/mmio/vi.h
@@ -6,7 +6,6 @@
 #include <cstdint>
 
 namespace N64 {
-
 namespace Mmio {
 namespace VI {
 
@@ -31,8 +30,6 @@ enum ViStatusFlags : uint32_t { SERRATE = 0x40 };
 
 // Video Interface
 class VI {
-    friend void pre_scanout(SDL_PixelFormatEnum pixel_format);
-
   private:
     static VI instance;
 
diff --git a/src/n64_system/n64_system.cpp b/src/n64_system/n64_system.cpp
index 9256a65..9460171 100644
--- a/src/n64_system/n64_system.cpp
+++ b/src/n64_system/n64_system.cpp
@@ -34,8 +34,8 @@ void reset_all(Config &config) {
     N64::g_vi().reset();
 }
 
-// https://github.com/Dillonb/n64/blob/6502f7d2f163c3f14da5bff8cd6d5ccc47143156/src/qt_frontend/n64_emulator_thread.cpp#L35
 void frontend_loop(Config &config) {
+    Frontend::Frontend frontend{};
 
     while (true) {
         N64System::step(config);
diff --git a/src/utils/utils.h b/src/utils/utils.h
index efd10d6..4a1851d 100644
--- a/src/utils/utils.h
+++ b/src/utils/utils.h
@@ -154,31 +154,6 @@ template <typename... Args>
     exit(-1);
 }
 
-inline std::vector<uint8_t> read_binary_file(std::string filepath) {
-
-    std::ifstream file(filepath.c_str(), std::ios::in | std::ios::binary);
-    if (!file.is_open()) {
-        Utils::abort("Could not open binary file: {}", filepath);
-        exit(-1);
-    }
-    // determine file size
-    uint64_t file_size = file.tellg();
-    // go to the last byte
-    file.seekg(0, std::ios::end);
-    file_size = static_cast<uint64_t>(file.tellg()) - file_size;
-    // go back to the first byte
-    file.clear();
-    file.seekg(0);
-
-    std::vector<uint8_t> ret;
-    ret.assign(file_size, 0);
-
-    // Read entire ROM data
-    file.read(reinterpret_cast<char *>(ret.data()), file_size);
-
-    return ret;
-}
-
 } // namespace Utils
 
 #endif
\ No newline at end of file

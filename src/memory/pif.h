#ifndef PIF_H
#define PIF_H

#include "cpu/cpu.h"
#include "rsp/rsp.h"

namespace N64 {
namespace Memory {

/* ROMのブートコード(PIF ROM)の副作用をエミュレートする */
// https://n64.readthedocs.io/#simulating-the-pif-rom
// FIXME: カートリッジの種類(CIC?)によって、PIF ROMの副作用が異なるっぽい
static void pif_rom_execute() {
    // https://github.com/SimoneN64/Kaizen/blob/dffd36fc31731a0391a9b90f88ac2e5ed5d3f9ec/src/backend/core/mmio/PIF.cpp#L379

    switch (n64mem.rom.get_cic()) {
    case CicType::CIC_UNKNOWN:
        n64cpu.gpr.set_gpr({});
    case CicType::CIC_NUS_6101:
        n64cpu.gpr.set_gpr(
            {0x0000000000000000,  0x0000000000000000,  0xFFFFFFFFDF6445CCU,
             0xFFFFFFFFDF6445CCU, 0x00000000000045CC,  0x0000000073EE317A,
             0xFFFFFFFFA4001F0CU, 0xFFFFFFFFA4001F08U, 0x00000000000000C0,
             0x0000000000000000,  0x0000000000000040,  0xFFFFFFFFA4000040U,
             0xFFFFFFFFC7601FACU, 0xFFFFFFFFC7601FACU, 0xFFFFFFFFB48E2ED6U,
             0xFFFFFFFFBA1A7D4BU, 0x0000000000000000,  0x0000000000000000,
             0x0000000000000000,  0x0000000000000000,  0x0000000000000001,
             0x0000000000000000,  0x0000000000000001,  0x0000000000000002,
             0xFFFFFFFF905F4718U, 0x0000000000000000,  0x0000000000000000,
             0x0000000000000000,  0xFFFFFFFFA4001FF0U, 0x0000000000000000,
             0xFFFFFFFFA4001550U});
    case CicType::CIC_NUS_7102:
        n64cpu.gpr.set_gpr(
            {0x0000000000000000,  0x0000000000000001,  0x000000001E324416,
             0x000000001E324416,  0x0000000000004416,  0x000000000EC5D9AF,
             0xFFFFFFFFA4001F0CU, 0xFFFFFFFFA4001F08U, 0x00000000000000C0,
             0x0000000000000000,  0x0000000000000040,  0xFFFFFFFFA4000040U,
             0x00000000495D3D7B,  0xFFFFFFFF8B3DFA1EU, 0x000000004798E4D4,
             0xFFFFFFFFF1D30682U, 0x0000000000000000,  0x0000000000000000,
             0x0000000000000000,  0x0000000000000000,  0x0000000000000000,
             0x0000000000000000,  0x000000000000003F,  0x0000000000000007,
             0x0000000000000000,  0x0000000013D05CAB,  0x0000000000000000,
             0x0000000000000000,  0x0000000000000000,  0xFFFFFFFFA4001FF0U,
             0x0000000000000000,  0xFFFFFFFFA4001554U});
    case CicType::CIC_NUS_6102_7101:
        n64cpu.gpr.set_gpr(
            {0x0000000000000000,  0x0000000000000001,  0x000000000EBDA536,
             0x000000000EBDA536,  0x000000000000A536,  0xFFFFFFFFC0F1D859U,
             0xFFFFFFFFA4001F0CU, 0xFFFFFFFFA4001F08U, 0x00000000000000C0,
             0x0000000000000000,  0x0000000000000040,  0xFFFFFFFFA4000040U,
             0xFFFFFFFFED10D0B3U, 0x000000001402A4CC,  0x000000002DE108EA,
             0x000000003103E121,  0x0000000000000000,  0x0000000000000000,
             0x0000000000000000,  0x0000000000000000,  0x0000000000000001,
             0x0000000000000000,  0x0000000000000000,  0x0000000000000000,
             0xFFFFFFFF9DEBB54FU, 0x0000000000000000,  0x0000000000000000,
             0x0000000000000000,  0xFFFFFFFFA4001FF0U, 0x0000000000000000,
             0xFFFFFFFFA4001550U});
    case CicType::CIC_NUS_6103_7103:
        n64cpu.gpr.set_gpr(
            {0x0000000000000000,  0x0000000000000001,  0x0000000049A5EE96,
             0x0000000049A5EE96,  0x000000000000EE96,  0xFFFFFFFFD4646273U,
             0xFFFFFFFFA4001F0CU, 0xFFFFFFFFA4001F08U, 0x00000000000000C0,
             0x0000000000000000,  0x0000000000000040,  0xFFFFFFFFA4000040U,
             0xFFFFFFFFCE9DFBF7U, 0xFFFFFFFFCE9DFBF7U, 0x000000001AF99984,
             0x0000000018B63D28,  0x0000000000000000,  0x0000000000000000,
             0x0000000000000000,  0x0000000000000000,  0x0000000000000001,
             0x0000000000000000,  0x0000000000000000,  0x0000000000000000,
             0xFFFFFFFF825B21C9U, 0x0000000000000000,  0x0000000000000000,
             0x0000000000000000,  0xFFFFFFFFA4001FF0U, 0x0000000000000000,
             0xFFFFFFFFA4001550U});
    case CicType::CIC_NUS_6105_7105:
        n64cpu.gpr.set_gpr(
            {0x0000000000000000,  0x0000000000000000,  0xFFFFFFFFF58B0FBFU,
             0xFFFFFFFFF58B0FBFU, 0x0000000000000FBF,  0xFFFFFFFFDECAAAD1U,
             0xFFFFFFFFA4001F0CU, 0xFFFFFFFFA4001F08U, 0x00000000000000C0,
             0x0000000000000000,  0x0000000000000040,  0xFFFFFFFFA4000040U,
             0xFFFFFFFF9651F81EU, 0x000000002D42AAC5,  0x00000000489B52CF,
             0x0000000056584D60,  0x0000000000000000,  0x0000000000000000,
             0x0000000000000000,  0x0000000000000000,  0x0000000000000001,
             0x0000000000000000,  0x0000000000000000,  0x0000000000000002,
             0xFFFFFFFFCDCE565FU, 0x0000000000000000,  0x0000000000000000,
             0x0000000000000000,  0xFFFFFFFFA4001FF0U, 0x0000000000000000,
             0xFFFFFFFFA4001550U});
    case CicType::CIC_NUS_6106_7106:
        n64cpu.gpr.set_gpr(
            {0x0000000000000000,  0x0000000000000000,  0xFFFFFFFFA95930A4U,
             0xFFFFFFFFA95930A4U, 0x00000000000030A4,  0xFFFFFFFFB04DC903U,
             0xFFFFFFFFA4001F0CU, 0xFFFFFFFFA4001F08U, 0x00000000000000C0,
             0x0000000000000000,  0x0000000000000040,  0xFFFFFFFFA4000040U,
             0xFFFFFFFFBCB59510U, 0xFFFFFFFFBCB59510U, 0x000000000CF85C13,
             0x000000007A3C07F4,  0x0000000000000000,  0x0000000000000000,
             0x0000000000000000,  0x0000000000000000,  0x0000000000000001,
             0x0000000000000000,  0x0000000000000000,  0x0000000000000002,
             0x00000000465E3F72,  0x0000000000000000,  0x0000000000000000,
             0x0000000000000000,  0xFFFFFFFFA4001FF0U, 0x0000000000000000,
             0xFFFFFFFFA4001550U});
    default:
        break;
    }

    // PCの初期化
    n64cpu.set_pc64(0xA4000040);

    // CPUのCOP0レジスタの初期化
    // https://github.com/Dillonb/n64/blob/6502f7d2f163c3f14da5bff8cd6d5ccc47143156/src/mem/pif.c#L305
    n64cpu.cop0.reg[Cpu::Cop0Reg::RANDOM] = 0x0000001F;
    n64cpu.cop0.reg[Cpu::Cop0Reg::STATUS] = 0x34000000;
    n64cpu.cop0.reg[Cpu::Cop0Reg::PRID] = 0x00000B00;
    n64cpu.cop0.reg[Cpu::Cop0Reg::CONFIG] = 0x0006E463;

    // ROMの最初0x1000バイトをSP DMEMにコピー
    //   i.e. 0xB0000000 から 0xA4000000 に0x1000バイトをコピー
    // https://github.com/Dillonb/n64/blob/6502f7d2f163c3f14da5bff8cd6d5ccc47143156/src/mem/pif.c#L358
    memcpy(n64rsp.sp_dmem, n64mem.rom.raw(), sizeof(uint8_t) * 0x1000);
}

} // namespace Memory
} // namespace N64

#endif